name: test

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
      - '[0-9]+.[0-9]{2}'
  pull_request:

env:
  DEV_IMAGE: docker-dev
  DOCKERDEV_RUN_EXTRA_FLAGS: -t
  DOCKER_EXPERIMENTAL: 1
  SKIP_BUILD_DEV_IMAGE: 1
  SKIP_BUILD_DYNBINARY: 1

jobs:
  dynbinary:
    runs-on: ubuntu-20.04
    env:
      BINARY_OUTPUT: ./build
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build
        uses: docker/bake-action@v1
        with:
          targets: binary
          set: |
            *.cache-from=type=gha,scope=build-dynamic
            *.cache-from=type=gha,scope=dev-dynbinary
            *.cache-to=type=gha,scope=dev-dynbinary
        env:
          GO_LINKMODE: dynamic
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dynbinary
          path: ${{ env.BINARY_OUTPUT }}
          if-no-files-found: error
          retention-days: 7

  devimage:
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build dev image
        uses: docker/bake-action@v1
        with:
          targets: dev
          set: |
            dev.cache-from=type=gha,scope=dev
            dev.cache-to=type=gha,scope=dev,mode=max
            dev.output=type=cacheonly

  unit:
    runs-on: ubuntu-20.04
    needs:
      - dynbinary
      - devimage
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up runner
        run: |
          sudo modprobe ipv6
          sudo modprobe ip6table_filter
          echo '{"experimental":true,"ipv6":true,"fixed-cidr-v6":"2001:db8:1::/64"}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dynbinary
          path: ./build/binary/
      -
        name: Build dev image
        uses: docker/bake-action@v1
        with:
          targets: dev
          set: |
            dev.cache-from=type=gha,scope=dev
      -
        name: Test
        run: |
          chmod +x ./build/binary/*
          make test-unit

  docker-py:
    runs-on: ubuntu-20.04
    needs:
      - dynbinary
      - devimage
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up runner
        run: |
          sudo modprobe ipv6
          sudo modprobe ip6table_filter
          echo '{"experimental":true,"ipv6":true,"fixed-cidr-v6":"2001:db8:1::/64"}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dynbinary
          path: ./build/binary/
      -
        name: Build dev image
        uses: docker/bake-action@v1
        with:
          targets: dev
          set: |
            dev.cache-from=type=gha,scope=dev
      -
        name: Test
        run: |
          chmod +x ./build/binary/*
          make test-docker-py
      -
        name: Test daemon logs
        if: always()
        run: |
          cat build/test-docker-py/docker.log

  integration-flaky:
    runs-on: ubuntu-20.04
    needs:
      - dynbinary
      - devimage
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up runner
        run: |
          sudo modprobe ipv6
          sudo modprobe ip6table_filter
          echo '{"experimental":true,"ipv6":true,"fixed-cidr-v6":"2001:db8:1::/64"}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build dev image
        uses: docker/bake-action@v1
        with:
          targets: dev
          set: |
            dev.cache-from=type=gha,scope=dev
      -
        name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dynbinary
          path: ./build/binary/
      -
        name: Test
        run: |
          chmod +x ./build/binary/*
          make test-integration-flaky
        env:
          TEST_SKIP_INTEGRATION_CLI: 1

  integration:
    runs-on: ubuntu-20.04
    needs:
      - dynbinary
      - devimage
    strategy:
      fail-fast: false
      matrix:
        mode:
          - ""
          - rootless
          - cgroup2
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up runner
        run: |
          sudo modprobe ipv6
          sudo modprobe ip6table_filter
          echo '{"experimental":true,"ipv6":true,"fixed-cidr-v6":"2001:db8:1::/64"}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
      -
        name: Prepare
        run: |
          if [ "${{ matrix.mode }}" = "rootless" ]; then
            echo "DOCKER_ROOTLESS=1" >> $GITHUB_ENV
          fi
          if [ "${{ matrix.mode }}" = "cgroup2" ]; then
            echo "DEV_SYSTEMD=true" >> $GITHUB_ENV
          fi
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build dev image
        uses: docker/bake-action@v1
        with:
          targets: dev
          set: |
            dev.cache-from=type=gha,scope=dev
      -
        name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dynbinary
          path: ./build/binary/
      -
        name: Test
        run: |
          chmod +x ./build/binary/*
          make test-integration
        env:
          TEST_SKIP_INTEGRATION_CLI: 1
      -
        name: Test daemon logs
        if: always()
        run: |
          cat build/test-integration/docker.log

  integration-cli:
    runs-on: ubuntu-20.04
    needs:
      - dynbinary
      - devimage
    strategy:
      fail-fast: false
      matrix:
        testsuite:
          - DockerSuite
          - DockerNetworkSuite|DockerHubPullSuite|DockerRegistrySuite|DockerSchema1RegistrySuite|DockerRegistryAuthTokenSuite|DockerRegistryAuthHtpasswdSuite
          - DockerSwarmSuite
          - DockerDaemonSuite
          - DockerExternalVolumeSuite
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up runner
        run: |
          sudo modprobe ipv6
          sudo modprobe ip6table_filter
          echo '{"experimental":true,"ipv6":true,"fixed-cidr-v6":"2001:db8:1::/64"}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build dev image
        uses: docker/bake-action@v1
        with:
          targets: dev
          set: |
            dev.cache-from=type=gha,scope=dev
      -
        name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dynbinary
          path: ./build/binary/
      -
        name: Test
        run: |
          chmod +x ./build/binary/*
          make test-integration
        env:
          TEST_SKIP_INTEGRATION: 1
          TESTFLAGS: "-test.run Test(${{ matrix.testsuite }})/"
      -
        name: Test daemon logs
        if: always()
        run: |
          cat build/test-integration/docker.log
